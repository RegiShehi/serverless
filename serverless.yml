service: myserverlessproject

frameworkVersion: "3"

plugins:
  - serverless-webpack

provider:
  name: aws
  runtime: nodejs18.x
  profile: regi
  httpApi:
    cors: true
#  stage: dev
  region: eu-central-1
  environment:
    tableName: ${self:custom.tableName}
    bucketName: ${self:custom.bucketName}
    websocketTableName: ${self:custom.websocketTableName}
  iamRoleStatements:
    - Effect: Allow
      Action: 
        - dynamodb:*
        - s3:*
        - ses:*
      Resource: '*'

package:
  individually: true

custom:
  tableName: player-points
  websocketTableName: websocket-users
  bucketName: serverless-bucket-upload-regi

functions:
  getPlayerScore:
    handler: lambdas/endpoints/getPlayerScore.handler
    events:
      - httpApi:
          method: GET
          path: /get-player-score/{ID}
  createPlayerScore:
    handler: lambdas/endpoints/createPlayerScore.handler
    events:
      - httpApi:
          method: POST
          path: /create-player-score/{ID}
  createFile:
    handler: lambdas/endpoints/createFile.handler
    events:
      - httpApi:
          method: POST
          path: /create-file/{fileName}
  getFile:
    handler: lambdas/endpoints/getFile.handler
    events:
      - httpApi:
          method: GET
          path: /get-file/{fileName}
  sendEmail:
    handler: lambdas/endpoints/sendEmail.handler
    events:
      - httpApi:
          method: POST
          path: /send-email
  
  # websocket lambda functions
  websocket-connect:
    handler: lambdas/websockets/connect.handler
    events:
      - websocket:
          route: $connect
  websocket-disconnect:
    handler: lambdas/websockets/disconnect.handler
    events:
      - websocket:
          route: $disconnect
  websocket-default:
    handler: lambdas/websockets/default.handler
    events:
      - websocket:
          route: $default
  websocket-message:
    handler: lambdas/websockets/message.handler
    events:
      - websocket:
          route: message

# add CloudFormation resource templates here
resources:
  Resources:
    DemoBucketUpload:
      Type: AWS::S3::Bucket
      Properties:
        BucketName: ${self:custom.bucketName}
    MyDynamoDbTable:
      Type: AWS::DynamoDB::Table
      Properties:
        TableName: ${self:custom.tableName}
        AttributeDefinitions:
          - AttributeName: ID
            AttributeType: S
        KeySchema:
          - AttributeName: ID
            KeyType: HASH
        BillingMode:  PAY_PER_REQUEST
    WebsocketUserTable:
      Type: AWS::DynamoDB::Table
      Properties:
        TableName: ${self:custom.websocketTableName}
        AttributeDefinitions:
          - AttributeName: ID
            AttributeType: S
        KeySchema:
          - AttributeName: ID
            KeyType: HASH
        BillingMode:  PAY_PER_REQUEST
         


