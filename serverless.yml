service: myserverlessproject

frameworkVersion: "3"

plugins:
  - serverless-webpack
  - serverless-s3-sync

provider:
  name: aws
  runtime: nodejs18.x
  profile: regi
  httpApi:
    cors: true
#  stage: dev
  region: eu-central-1
  environment:
    tableName: ${self:custom.tableName}
    bucketName: ${self:custom.bucketName}
    websocketTableName: ${self:custom.websocketTableName}
  iamRoleStatements:
    - Effect: Allow
      Action: 
        - dynamodb:*
        - s3:*
        - ses:*
        - comprehend:*
      Resource: '*'

package:
  individually: true

custom:
  reactBucketName: my-serverless-react-app-regi
  tableName: player-points
  websocketTableName: websocket-users
  bucketName: serverless-bucket-upload-regi
  s3Sync:
    - bucketName: ${self:custom.reactBucketName}
      localDir: react-demo/dist/

functions:
  getPlayerScore:
    handler: lambdas/endpoints/getPlayerScore.handler
    events:
      - httpApi:
          method: GET
          path: /get-player-score/{ID}
  createPlayerScore:
    handler: lambdas/endpoints/createPlayerScore.handler
    events:
      - httpApi:
          method: POST
          path: /create-player-score/{ID}
  updatePlayerScore:
    handler: lambdas/endpoints/updatePlayerScore.handler
    events:
      - httpApi:
          method: PUT
          path: /update-player-score/{ID}
  createFile:
    handler: lambdas/endpoints/createFile.handler
    events:
      - httpApi:
          method: POST
          path: /create-file/{fileName}
  getFile:
    handler: lambdas/endpoints/getFile.handler
    events:
      - httpApi:
          method: GET
          path: /get-file/{fileName}
  sendEmail:
    handler: lambdas/endpoints/sendEmail.handler
    events:
      - httpApi:
          method: POST
          path: /send-email
  sendReminder:
    handler: lambdas/scheduledTasks/reminderEmail.handler
    events:
      - schedule: cron(0 9 ? * 7 *)
  # analyse:
  #   handler: lambdas/endpoints/analyse.handler
  #   events:
  #     - httpApi:
  #         method: POST
  #         path: /analyse
  
  # websocket lambda functions
  websocket-connect:
    handler: lambdas/websockets/connect.handler
    events:
      - websocket:
          route: $connect
  websocket-disconnect:
    handler: lambdas/websockets/disconnect.handler
    events:
      - websocket:
          route: $disconnect
  websocket-default:
    handler: lambdas/websockets/default.handler
    events:
      - websocket:
          route: $default
  websocket-message:
    handler: lambdas/websockets/message.handler
    events:
      - websocket:
          route: message

# add CloudFormation resource templates here
resources:
  Resources:
    DemoBucketUpload:
      Type: AWS::S3::Bucket
      Properties:
        BucketName: ${self:custom.bucketName}
    ReactAppBucket:
      Type: AWS::S3::Bucket
      Properties:
        BucketName: ${self:custom.reactBucketName}
        # AccessControl: PublicRead
        PublicAccessBlockConfiguration:
          BlockPublicAcls: false
        OwnershipControls:
          Rules:
            - ObjectOwnership: ObjectWriter
        WebsiteConfiguration:
          IndexDocument: index.html
          ErrorDocument: index.html
    S3AccessPolicy:
      Type: AWS::S3::BucketPolicy
      Properties:
        PolicyDocument:
          Statement:
          - Sid: PublicReadGetObject
            Effect: Allow
            Principal: '*'
            Action:
              - s3:GetObject
            Resource: arn:aws:s3:::${self:custom.reactBucketName}/*
        Bucket:
          Ref: ReactAppBucket
    CloudFrontDistribution:
      Type: AWS::CloudFront::Distribution
      Properties:
        DistributionConfig:
          Origins:
            - DomainName: ${self:custom.reactBucketName}.s3.amazonaws.com
              Id: ReactApp
              CustomOriginConfig:
                HTTPPort: 80
                HTTPSPort: 443
                OriginProtocolPolicy: https-only
          DefaultCacheBehavior:
            AllowedMethods:
              - DELETE
              - GET
              - HEAD
              - OPTIONS
              - PATCH
              - POST
              - PUT
            TargetOriginId: ReactApp
            ForwardedValues:
              QueryString: 'false'
              Cookies:
                Forward: none
            ViewerProtocolPolicy: redirect-to-https
          ViewerCertificate:
            CloudFrontDefaultCertificate: true
          Enabled: 'true'
          DefaultRootObject: index.html
          CustomErrorResponses:
            - ErrorCode: 404
              ResponseCode: 200
              ResponsePagePath: /index.html
    MyDynamoDbTable:
      Type: AWS::DynamoDB::Table
      Properties:
        TableName: ${self:custom.tableName}
        AttributeDefinitions:
          - AttributeName: ID
            AttributeType: S
        KeySchema:
          - AttributeName: ID
            KeyType: HASH
        BillingMode:  PAY_PER_REQUEST
    WebsocketUserTable:
      Type: AWS::DynamoDB::Table
      Properties:
        TableName: ${self:custom.websocketTableName}
        AttributeDefinitions:
          - AttributeName: ID
            AttributeType: S
        KeySchema:
          - AttributeName: ID
            KeyType: HASH
        BillingMode:  PAY_PER_REQUEST
         


