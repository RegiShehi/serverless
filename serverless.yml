service: myserverlessproject

frameworkVersion: "3"

plugins:
  - serverless-s3-sync
  - serverless-webpack

provider:
  name: aws
  runtime: nodejs18.x
  profile: regi
  httpApi:
    cors: true
#  stage: dev
  region: eu-central-1
  environment:
    tableName: ${self:custom.tableName}
  iamRoleStatements:
    - Effect: Allow
      Action: 
        - dynamodb:*
      Resource: '*'

package:
  individually: true

custom:
  tableName: player-points
  s3Sync:
    - bucketName: serverless-bucket-upload-regi
      localDir: uploadData

functions:
  getPlayerScore:
    handler: lambdas/endpoints/getPlayerScore.handler
    events:
      - httpApi:
          method: GET
          path: /get-player-score/{ID}
  createPlayerScore:
    handler: lambdas/endpoints/createPlayerScore.handler
    events:
      - httpApi:
          method: POST
          path: /create-player-score/{ID}

# add CloudFormation resource templates here
resources:
  Resources:
    DemoBucketUpload:
      Type: AWS::S3::Bucket
      Properties:
        BucketName: serverless-bucket-upload-regi
    MyDynamoDbTable:
      Type: AWS::DynamoDB::Table
      Properties:
        TableName: ${self:custom.tableName}
        AttributeDefinitions:
          - AttributeName: ID
            AttributeType: S
        KeySchema:
          - AttributeName: ID
            KeyType: HASH
        BillingMode:  PAY_PER_REQUEST
         


